# Makefile for Kyoto Cabinet for Lua



#================================================================
# Setting Variables
#================================================================


# Generic settings
SHELL = @SHELL@

# Package information
PACKAGE = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@
PACKAGEDIR = $(PACKAGE)-$(VERSION)
PACKAGETGZ = $(PACKAGE)-$(VERSION).tar.gz

# Targets
LIBRARYFILES = @MYLIBRARYFILES@
LIBOBJFILES = @MYLIBOBJFILES@
COMMANDFILES = @MYCOMMANDFILES@

# Install destinations
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
LIBDIR = @libdir@
BINDIR = @bindir@
LUALIBDIR = @MYLUALIBDIR@
DESTDIR =

# Building configuration
LUA = @LUA@
LUADOC = @LUADOC@
CXX = @CXX@
CPPFLAGS = @MYCPPFLAGS@
CXXFLAGS = @MYCXXFLAGS@
LDFLAGS = @MYLDFLAGS@
LIBS = @LIBS@
LDENV = LD_RUN_PATH=/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@:.
RUNENV = @MYLDLIBPATHENV@=.:/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@



#================================================================
# Suffix rules
#================================================================


.SUFFIXES :
.SUFFIXES : .cc .o

.cc.o :
	$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $<



#================================================================
# Actions
#================================================================


all : $(LIBRARYFILES) $(COMMANDFILES)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Ready to install.\n'
	@printf '#================================================================\n'


clean :
	rm -rf $(LIBRARYFILES) $(LIBOBJFILES) $(COMMANDFILES) \
	  *.o a.out *.class check.in check.out gmon.out leak.log \
	  casket casket-* casket.* *.kch *.kct *.kcd *.kcf *.wal *.tmpkc* *.kcss *~ hoge moge


untabify :
	ls *.cc *.lua | while read name ; \
	  do \
	    sed -e 's/\t/        /g' -e 's/ *$$//' $$name > $$name~; \
	    [ -f $$name~ ] && mv -f $$name~ $$name ; \
	  done
	chmod 755 *test.lua


install :
	mkdir -p $(DESTDIR)$(LUALIBDIR)
	cp -Rf $(LIBRARYFILES) $(DESTDIR)$(LUALIBDIR)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Thanks for using Kyoto Cabinet for Lua.\n'
	@printf '#================================================================\n'


uninstall :
	cd $(DESTDIR)$(LUALIBDIR) && rm -f $(LIBRARYFILES)


dist :
	$(MAKE) untabify
	$(MAKE) distclean
	cd .. && tar cvf - $(PACKAGEDIR) | gzip -c > $(PACKAGETGZ)
	sync ; sync


distclean : clean
	rm -rf Makefile config.cache config.log config.status config.tmp autom4te.cache


check :
	$(MAKE) DBNAME="*" RNUM="10000" check-each
	$(MAKE) DBNAME="%" RNUM="10000" check-each
	$(MAKE) DBNAME="casket.kch" RNUM="10000" check-each
	$(MAKE) DBNAME="casket.kct" RNUM="10000" check-each
	$(MAKE) DBNAME="casket.kcd" RNUM="1000" check-each
	$(MAKE) DBNAME="casket.kcf" RNUM="10000" check-each
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Checking completed.\n'
	@printf '#================================================================\n'


check-each :
	rm -rf casket*
	$(RUNENV) $(LUA) kctest.lua order "$(DBNAME)" "$(RNUM)"
	$(RUNENV) $(LUA) kctest.lua order -rnd "$(DBNAME)" "$(RNUM)"
	$(RUNENV) $(LUA) kctest.lua order -etc "$(DBNAME)" "$(RNUM)"
	$(RUNENV) $(LUA) kctest.lua order -rnd -etc "$(DBNAME)" "$(RNUM)"
	$(RUNENV) $(LUA) kctest.lua wicked "$(DBNAME)" "$(RNUM)"
	$(RUNENV) $(LUA) kctest.lua wicked -it 4 "$(DBNAME)" "$(RNUM)"
	$(RUNENV) $(LUA) kctest.lua misc "$(DBNAME)"
	$(RUNENV) ./kcmttest order "$(DBNAME)" kcmttest.lua "$(RNUM)"
	$(RUNENV) ./kcmttest order -rnd "$(DBNAME)" kcmttest.lua "$(RNUM)"
	$(RUNENV) ./kcmttest order -etc "$(DBNAME)" kcmttest.lua "$(RNUM)"
	$(RUNENV) ./kcmttest order -rnd -etc "$(DBNAME)" kcmttest.lua "$(RNUM)"
	$(RUNENV) ./kcmttest order -th 4 -rnd -etc "$(DBNAME)" kcmttest.lua "$(RNUM)"
	rm -rf casket*


check-forever :
	while true ; \
	  do \
	    $(MAKE) check || break ; \
	  done


doc :
	make docclean
	mkdir -p doc
	$(LUADOC) -d doc --nofiles kyotocabinet-doc.lua
	find doc -type f -name '*.html' | \
	  while read name ; do \
	    sed -e 's/<title>.*<\/title>/<title>Kyoto Cabinet<\/title>/' \
	      -e 's/.*validator\.w3\.org.*/Kyoto Cabinet Manual/' $$name > $$name~ ; \
	    [ -f $$name~ ] && mv -f $$name~ $$name ; \
	  done
	lua docrefine.lua


docclean :
	rm -rf doc


.PHONY : all clean install casket check doc



#================================================================
# Building binaries
#================================================================


kyotocabinet.so : $(LIBOBJFILES)
	$(CXX) $(CXXFLAGS) -shared -o $@ $(LIBOBJFILES) $(LDFLAGS) $(LIBS)


kyotocabinet.dylib : $(LIBOBJFILES)
	$(CXX) $(CXXFLAGS) -dynamiclib -o $@ $(LIBOBJFILES) $(LDFLAGS) $(LIBS)


kcmttest : kcmttest.o
	$(CXX) $(CXXFLAGS) -o $@ $< $(LDFLAGS) $(LIBS) -pagezero_size 10000 -image_base 100000000



# END OF FILE
