# Source of configuration for Kyoto Cabinet for Lua



#================================================================
# Generic Settings
#================================================================

# Package name
AC_INIT(kyotocabinet-lua, 1.28)

# Targets
MYLIBRARYFILES=""
MYLIBOBJFILES="kyotocabinet.o"
MYCOMMANDFILES="kcmttest"

# Building flags
MYCXXFLAGS="-Wall -fPIC -fsigned-char -O2"
MYCPPFLAGS="-I. -I\$(INCLUDEDIR) -I$HOME/include -I/usr/local/include -DNDEBUG"
MYLDFLAGS="-L. -L\$(LIBDIR) -L$HOME/lib -L/usr/local/lib"
MYRUNPATH="\$(LIBDIR)"
MYLDLIBPATHENV="LD_LIBRARY_PATH"

# Building paths
pathtmp="$PATH"
PATH="$HOME/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
PATH="$PATH:/usr/ccs/bin:/usr/ucb:/usr/xpg4/bin:/usr/xpg6/bin:$pathtmp"
LIBRARY_PATH="$HOME/lib:/usr/local/lib:$LIBRARY_PATH"
LD_LIBRARY_PATH="$HOME/lib:/usr/local/lib:$LD_LIBRARY_PATH"
CPATH="$HOME/include:/usr/local/include:$CPATH"
PKG_CONFIG_PATH="$HOME/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
export PATH LIBRARY_PATH LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH
if type pkg-config >config.tmp 2>&1
then
  PATH="$PATH:`pkg-config --variable=bindir kyotocabinet`"
  LIBRARY_PATH="$LIBRARY_PATH:`pkg-config --variable=libdir kyotocabinet`"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:`pkg-config --variable=libdir kyotocabinet`"
  CPATH="$CPATH:`pkg-config --variable=includedir kyotocabinet`"
  export PATH LIBRARY_PATH LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH
fi



#================================================================
# Options
#================================================================

# Internal variables
enables=""

# Debug mode
AC_ARG_ENABLE(debug,
  AC_HELP_STRING([--enable-debug], [build for debugging]))
if test "$enable_debug" = "yes"
then
  MYCXXFLAGS="-Wall -fPIC -fsigned-char -g -O0"
  MYCPPFLAGS="$MYCPPFLAGS -UNDEBUG -D_KCDEBUG"
  enables="$enables (debug)"
fi

# Developping mode
AC_ARG_ENABLE(devel,
  AC_HELP_STRING([--enable-devel], [build for development]))
if test "$enable_devel" = "yes"
then
  MYCXXFLAGS="-Wall -Wextra -Wno-unused-parameter -Wnon-virtual-dtor"
  MYCXXFLAGS="$MYCXXFLAGS -fPIC -fsigned-char -g -O2 -fno-inline -pipe"
  MYCPPFLAGS="$MYCPPFLAGS -UNDEBUG -D_KCDEBUG"
  enables="$enables (devel)"
fi

# Specify the installation path of Kyoto Cabinet
AC_ARG_WITH(kc,
  AC_HELP_STRING([--with-kc=DIR], [search DIR/include and DIR/lib for Kyoto Cabinet]))
if test -n "$with_kc"
then
  MYCPPFLAGS="$MYCPPFLAGS -I$with_kc/include"
  MYLDFLAGS="$MYLDFLAGS -L$with_kc/lib"
  CPATH="$CPATH:$with_kc/include"
  LIBRARY_PATH="$LIBRARY_PATH:$with_kc/lib"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$with_kc/lib"
  PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$with_kc/lib/pkgconfig"
fi

# Specify the installation path of Lua
AC_ARG_WITH(lua,
  AC_HELP_STRING([--with-lua=DIR], [search DIR/include and DIR/lib for Lua]))
if test -n "$with_lua"
then
  MYCPPFLAGS="$MYCPPFLAGS -I$with_lua/include"
  MYLDFLAGS="$MYLDFLAGS -L$with_lua/lib"
  CPATH="$CPATH:$with_lua/include"
  LIBRARY_PATH="$LIBRARY_PATH:$with_lua/lib"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$with_lua/lib"
  PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$with_lua/lib/pkgconfig"
fi

# Messages
printf '#================================================================\n'
printf '# Configuring Kyoto Cabinet for Lua version %s%s.\n' "$PACKAGE_VERSION" "$enables"
printf '#================================================================\n'



#================================================================
# Checking Commands to Build with
#================================================================

# Lua commands
LUA="lua"
LUADOC="luadoc"

# Lua environment
luaver=`$LUA -e 'v = string.gsub(_VERSION, ".* ", ""); print(v)'`
MYCPPFLAGS="$MYCPPFLAGS -I/usr/include/lua$luaver -I/usr/local/include/lua$luaver"
MYCPPFLAGS="$MYCPPFLAGS -I/usr/include/lua -I/usr/local/include/lua"
MYLDFLAGS="$MYLDFLAGS -L/usr/lib/lua$luaver -L/usr/local/lib/lua$luaver"
MYLDFLAGS="$MYLDFLAGS -L/usr/lib/lua -L/usr/local/lib/lua"
LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/lua$luaver:/usr/local/lib/lua$luaver"
LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/lua:/usr/local/lib/lua"
LIBRARY_PATH="$LIBRARY_PATH:/usr/lib/lua$luaver:/usr/local/lib/lua$luaver"
LIBRARY_PATH="$LIBRARY_PATH:/usr/lib/lua:/usr/local/lib/lua"
CPATH="$CPATH:/usr/include/lua$luaver:/usr/local/include/lua$luaver"
CPATH="$CPATH:/usr/include/lua:/usr/local/include/lua"

# Lua library path
MYLUALIBDIR=`$LUA libpath.lua`
if test -z "$MYLUALIBDIR"
then
  MYLUALIBDIR="$libdir/lua/$luaver"
fi

# C compiler
AC_PROG_CC
AC_PROG_CXX
AC_LANG(C++)

# System-depending optimization
printf 'checking for 64-bit availability... '
if printf 'main() {}' | $CC -xc -m64 -o config.tmp - >config.tmp 2>&1
then
  MYCFLAGS="-m64 $MYCFLAGS"
  MYCXXFLAGS="-m64 $MYCXXFLAGS"
  printf 'yes\n'
else
  printf 'no\n'
fi
if test "$enable_opt" != "no"
then
  printf 'checking for CPU optimization availability... '
  if printf 'main() {}' | $CC -xc -march=native -o config.tmp - >config.tmp 2>&1
  then
    MYCFLAGS="-march=native $MYCFLAGS"
    MYCXXFLAGS="-march=native $MYCXXFLAGS"
    printf 'yes\n'
  else
    printf 'no\n'
  fi
fi

# Underlying libraries
AC_CHECK_LIB(c, main)
AC_CHECK_LIB(m, main)
AC_CHECK_LIB(pthread, main)
AC_CHECK_LIB(rt, main)
AC_CHECK_LIB(stdc++, main)
AC_CHECK_LIB(regex, main)
AC_CHECK_LIB(z, main)
AC_CHECK_LIB(kyotocabinet, main)
AC_CHECK_LIB(lua, main)
AC_CHECK_LIB(lua$luaver, main)

# Necessary headers
AC_CHECK_HEADER(stdlib.h, true, AC_MSG_ERROR([stdlib.h is required]))
AC_CHECK_HEADER(stdint.h, true, AC_MSG_ERROR([stdint.h is required]))
AC_CHECK_HEADER(kccommon.h, true, AC_MSG_ERROR([kccommon.h is required]))
AC_CHECK_HEADER(lua.h, true, AC_MSG_ERROR([lua.h is required]))

# Checking the version of Kyoto Cabinet with pkg-config
if type pkg-config >config.tmp 2>&1
then
  printf 'checking Kyoto Cabinet by pkg-config... '
  if pkg-config --atleast-version=1.2.65 kyotocabinet
  then
    MYCPPFLAGS="$MYCPPFLAGS -I`pkg-config --variable=includedir kyotocabinet`"
    MYLDFLAGS="$MYLDFLAGS -L`pkg-config --variable=libdir kyotocabinet`"
    MYRUNPATH="$MYRUNPATH:`pkg-config --variable=libdir kyotocabinet`"
    printf 'yes\n'
  else
    printf 'no\n'
    AC_MSG_ERROR([required version of Kyoto Cabinet was not detected])
  fi
fi

# Shared libraries
if uname | grep Darwin >config.tmp
then
  MYLIBRARYFILES="$MYLIBRARYFILES kyotocabinet.dylib"
  MYLDLIBPATHENV="DYLD_LIBRARY_PATH"
else
  MYLIBRARYFILES="$MYLIBRARYFILES kyotocabinet.so"
fi



#================================================================
# Generic Settings
#================================================================


# Export variables
AC_SUBST(LUA)
AC_SUBST(LUADOC)
AC_SUBST(MYLIBRARYFILES)
AC_SUBST(MYLIBOBJFILES)
AC_SUBST(MYCOMMANDFILES)
AC_SUBST(MYCXXFLAGS)
AC_SUBST(MYCPPFLAGS)
AC_SUBST(MYLDFLAGS)
AC_SUBST(MYRUNPATH)
AC_SUBST(MYLDLIBPATHENV)
AC_SUBST(MYLUALIBDIR)

# Targets
AC_OUTPUT(Makefile)

# Messages
printf '#================================================================\n'
printf '# Ready to make.\n'
printf '#================================================================\n'



# END OF FILE
